"use client"
import { Inter } from 'next/font/google'
import './globals.css'
import HeadMetaData from './components/HeadMetaData'
import Header from './components/Header'
import Banner from './components/Banner'
import Footer from './components/Footer'
import HomeContext from './contexts/HomeContext'
import { useEffect, useState } from 'react'
import Cart from './components/Cart'
import AtLoadModalShow from './components/modals/AtLoadModalShow'
import DeliveryModal from './components/modals/DeliveryModal'
import AvailableStoresShow from './components/modals/AvailableStoresShow'
import moment from 'moment/moment'

const inter = Inter({ subsets: ['latin'] })

// export const metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// }

export default function RootLayout({ children }) 
{
  const [iscartbtnclicked, setIscartbtnclicked] = useState(false)

  const [firstname, setFirstname] = useState("Sultan")
  const [lastname, setLastname] = useState("Ahmad")

  // Day Name and Day Number
  const [dayname, setDayname] = useState("")
  const [daynumber, setDaynumber] = useState(0)
  // HomeContext Data
  const [postcode, setPostcode] = useState("SK7 6BN")
  const [street1, setStreet1] = useState("Chatsworth Rd,")
  const [street2, setStreet2] = useState("Hazel Grover, Stockport")

  const [atfirstload, setAtfirstload] = useState(true)

  const [isdeliverybtnclicked, setIsdeliverybtnclicked] = useState(false);
  const [isdeliverychangedbtnclicked, setIsdeliverychangedbtnclicked] = useState(false);
  const [iscartfull, setIscartfull] = useState(true)

  const [iscartitemdottedbtnclicked, setIscartitemdottedbtnclicked] = useState(false)

  const [isitemclicked, setIsitemclicked] = useState(false)
  const [isquickviewclicked, setIsquickviewclicked] = useState(false)

  const [ismodifierclicked, setIsmodifierclicked] = useState(false)

  const [ischeckoutclicked, setIscheckoutclicked] = useState(false)

  // Button states
  const [isgobtnclicked, setIsgobtnclicked] = useState(false)

  let options = '';

  for(let i = 1; i < 100; i++)
  {
      options += `<option value${i}" className="co">${i}</option>`
  }

  useEffect(() => 
  {
    let qtySelect = document.querySelectorAll(`.qty-select`)  
    for(let i = 0; i < qtySelect.length; i++)
    {
      qtySelect[i].innerHTML = options
    }
  }, [isitemclicked,isquickviewclicked,iscartbtnclicked,ismodifierclicked])

  const handleItemClicked = () =>
  {
    setIsitemclicked(true)
    setIsquickviewclicked(false)
  }

  const handleQuickViewClicked = () =>
  {
    setIsquickviewclicked(true)
    setIsitemclicked(false)
  }

  const handleInput = (type) =>
  {
    setIsmodifierclicked(true)
  }

  const handleItemModalOff = (event) =>
  {
    event.preventDefault();
    setIsitemclicked(false)
  }

  const handleCheckout = () =>
  {
    setIscheckoutclicked(true)
    setIscartbtnclicked(false)
  }
  // HomeContext Data End
  // const {iscartbtnclicked, setIscartbtnclicked} = useContext(HomeContext)
  const navcategories = [
    {
    id: 1,
    name: 'Feature item1'
    },
    {
      id: 2,
      name: 'Feature item2'
    },
    {
      id: 3,
      name: 'Feature item3'
    },
    {
      id: 4,
      name: 'Feature item4'
    },
    {
      id: 5,
      name: 'Feature item5'
    },
    {
      id: 6,
      name: 'Feature item6'
    },
    {
      id: 7,
      name: 'Feature item7'
    }
  ]  

  // const contentRef = useRef(null);

  const [navigationcategories, setNavigationcategories] = useState([])
  
  // const [contentWidth, setContentWidth] = useState(0);

  const [isscrolled, setIsScrolled] = useState(false)
  const [scrollPosition, setScrollPosition] = useState(0);
  const [navmobileindex, setNavmobileindex] = useState(0)

  const [ordertypeselect, setOrdertypeselect] = useState(1)

  const handleScroll = () => {
    // Check if the user has scrolled down (you can adjust the threshold as needed)
    if (window.scrollY > 200) {
      setIsScrolled(true);
      const currentPosition = window.scrollY;
      // Determine which section is currently in view
      const active = navcategories?.find((section, index) => {
        const nextSection = navcategories[index + 1];
        if (nextSection) {
          return currentPosition >= document.getElementById(`section${section.id}`)?.offsetTop 
          &&
            currentPosition < document.getElementById(`section${nextSection.id}`)?.offsetTop;
        }
        return currentPosition >= document.getElementById(`section${section.id}`)?.offsetTop;
      });

      setNavmobileindex(active ? active.id : navmobileindex);

      setScrollPosition(currentPosition / 10);
    } else{
      setIsScrolled(false);
    }
  };
  
  useEffect(() => {
    const dayNumber = moment().day();

    // Get the current day name
    const dayName = moment().format('dddd');

    setDayname(dayName)
    setDaynumber(dayNumber)

    setNavmobileindex(navcategories[0].id)
    setNavigationcategories(navcategories)
    
    // Add a scroll event listener to track scrolling
    window.addEventListener('scroll', handleScroll);

    // if (contentRef.current) {
    //   setContentWidth(navcategories.length * contentRef.current.offsetWidth);
    // }

    const tabs = document.querySelectorAll(".alaqbtbbh6h7avh8akawanothernav bycsd3d4topbar-div");
    // const rightArrow = document.querySelector(
    //   ".scrollable-tabs-container .right-arrow svg"
    // );
    // const leftArrow = document.querySelector(
    //   ".scrollable-tabs-container .left-arrow svg"
    // );
    const tabsList = document.querySelector(".alaqbbbcnocqavlcakawtopbar-div");
    // const leftArrowContainer = document.querySelector(
    //   ".scrollable-tabs-container .left-arrow"
    // );
    // const rightArrowContainer = document.querySelector(
    //   ".scrollable-tabs-container .right-arrow"
    // );

    const removeAllActiveClasses = () => {
      tabs.forEach((tab) => {
        tab.classList.remove("active");
      });
    };

    tabs.forEach((tab) => {
      tab.addEventListener("click", () => {
        removeAllActiveClasses();
        tab.classList.add("active");
      });
    });

    const manageIcons = () => {
      if (tabsList.scrollLeft >= 20) {
        // leftArrowContainer.classList.add("active");
      } else {
        // leftArrowContainer.classList.remove("active");
      }

      let maxScrollValue = tabsList.scrollWidth - tabsList.clientWidth - 20;
      // console.log("scroll width: ", tabsList.scrollWidth);
      // console.log("client width: ", tabsList.clientWidth);

      if (tabsList.scrollLeft >= maxScrollValue) {
        // rightArrowContainer.classList.remove("active");
      } else {
        // rightArrowContainer.classList.add("active");
      }
    };

    // rightArrow.addEventListener("click", () => {
    //   tabsList.scrollLeft += 200;
    //   manageIcons();
    // });

    // leftArrow.addEventListener("click", () => {
    //   tabsList.scrollLeft -= 200;
    //   manageIcons();
    // });

    tabsList?.addEventListener("scroll", manageIcons);

    let dragging = false;

    const drag = (e) => {
      if (!dragging) return;
      tabsList.classList.add("dragging");
      tabsList.scrollLeft -= e.movementX; 
    };

    tabsList?.addEventListener("mousedown", () => {
      dragging = true;
    });

    tabsList?.addEventListener("mousemove", drag);

    document.addEventListener("mouseup", () => {
      dragging = false;
      tabsList?.classList.remove("dragging");
    });
 
    // Clean up the event listener when the component unmounts
    return () => {
      window.removeEventListener('scroll', handleScroll);
      // setContentWidth(0)
    };

  }, []);

  const handleOrderType = (id) =>
  {
    setOrdertypeselect(id)
  }
  
  console.log("is delivery btn clicked: ", isdeliverybtnclicked);
  return (
    <html lang="en">
      <HeadMetaData />
      <body className="body-tag">
        <HomeContext.Provider value={{dayname,daynumber,setIsgobtnclicked, firstname,lastname,iscartbtnclicked,ordertypeselect, setOrdertypeselect,navcategories,navmobileindex,isscrolled,scrollPosition,setAtfirstload,postcode, setPostcode, street1, setStreet1, street2, setStreet2,isdeliverychangedbtnclicked, setIsdeliverychangedbtnclicked,ischeckoutclicked, setIscheckoutclicked,iscartitemdottedbtnclicked,setIscartitemdottedbtnclicked,iscartfull,iscartbtnclicked,setIscartbtnclicked, ismodifierclicked,setIsmodifierclicked,setIsitemclicked, setIsdeliverybtnclicked, setIscartbtnclicked, handleInput, setNavmobileindex}}>
          <Header />
          {children}
          {atfirstload && <AtLoadModalShow />}
          {iscartbtnclicked && <Cart />}
          {isdeliverybtnclicked && <DeliveryModal />}
          {isgobtnclicked && <AvailableStoresShow />}
          <Footer />
        </HomeContext.Provider>
      </body>
      {/* <div>
        <div className="loader"></div>
      </div> */}
    </html>
  )
}
